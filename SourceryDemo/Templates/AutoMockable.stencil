// AutoMockable

{% macro addUnderlyingVariable variable %}
  var {{variable.name}}: {{variable.typeName}}{% if variable.isMutable %}{% call addMutableAccessors variable %}{% else %}{% call addReadOnlyAccessor variable %}{% endif %}
  var {% call underlyingVariableName variable %}: {{variable.unwrappedTypeName}}!
{% endmacro %}

{% macro addMutableAccessors variable %} {
    get {
      return {% call underlyingVariableName variable %}
    }
    set {
      {% call underlyingVariableName variable %} = newValue
    }
  }
{% endmacro %}

{% macro addReadOnlyAccessor variable %} { return {% call underlyingVariableName variable %} }
{% endmacro %}

{% macro underlyingVariableName variable %}underlying{{variable.name|upperFirstLetter}}{% endmacro %}

{% macro receivedParameterName parameter function %}received{{function.callName|upperFirstLetter}}{{parameter.name|upperFirstLetter}}{% endmacro %}
{% macro addReceivedParameterVariable parameter function %}var {% call receivedParameterName parameter function %}: {{parameter.unwrappedTypeName}}!{% endmacro %}

{% for protocol in types.implementing.AutoMockable|protocol %}
class {{protocol.name}}Mock: {{protocol.name}} {
  {% for variable in protocol.variables %}
  {% call addUnderlyingVariable variable %}

  {% endfor %}

  {% for function in protocol.methods %}
  {% for parameter in function.parameters %}
  {% call addReceivedParameterVariable parameter function %}
  {% endfor %}

  func {{function.name}} -> {{function.returnTypeName}} {
    {% for parameter in function.parameters %}
    {% call receivedParameterName parameter function %} = {{ parameter.name }}
    {% endfor %}
  }

  {% endfor %}
}

{% endfor %}